/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VerificationImport } from './routes/verification'
import { Route as SwapImport } from './routes/swap'
import { Route as RecoveryImport } from './routes/recovery'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as LtokenImport } from './routes/ltoken'
import { Route as IndexImport } from './routes/index'
import { Route as GamesChessImport } from './routes/games/chess'

// Create/Update Routes

const VerificationRoute = VerificationImport.update({
  id: '/verification',
  path: '/verification',
  getParentRoute: () => rootRoute,
} as any)

const SwapRoute = SwapImport.update({
  id: '/swap',
  path: '/swap',
  getParentRoute: () => rootRoute,
} as any)

const RecoveryRoute = RecoveryImport.update({
  id: '/recovery',
  path: '/recovery',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const LtokenRoute = LtokenImport.update({
  id: '/ltoken',
  path: '/ltoken',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const GamesChessRoute = GamesChessImport.update({
  id: '/games/chess',
  path: '/games/chess',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/ltoken': {
      id: '/ltoken'
      path: '/ltoken'
      fullPath: '/ltoken'
      preLoaderRoute: typeof LtokenImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/recovery': {
      id: '/recovery'
      path: '/recovery'
      fullPath: '/recovery'
      preLoaderRoute: typeof RecoveryImport
      parentRoute: typeof rootRoute
    }
    '/swap': {
      id: '/swap'
      path: '/swap'
      fullPath: '/swap'
      preLoaderRoute: typeof SwapImport
      parentRoute: typeof rootRoute
    }
    '/verification': {
      id: '/verification'
      path: '/verification'
      fullPath: '/verification'
      preLoaderRoute: typeof VerificationImport
      parentRoute: typeof rootRoute
    }
    '/games/chess': {
      id: '/games/chess'
      path: '/games/chess'
      fullPath: '/games/chess'
      preLoaderRoute: typeof GamesChessImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/ltoken': typeof LtokenRoute
  '/privacy': typeof PrivacyRoute
  '/recovery': typeof RecoveryRoute
  '/swap': typeof SwapRoute
  '/verification': typeof VerificationRoute
  '/games/chess': typeof GamesChessRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ltoken': typeof LtokenRoute
  '/privacy': typeof PrivacyRoute
  '/recovery': typeof RecoveryRoute
  '/swap': typeof SwapRoute
  '/verification': typeof VerificationRoute
  '/games/chess': typeof GamesChessRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/ltoken': typeof LtokenRoute
  '/privacy': typeof PrivacyRoute
  '/recovery': typeof RecoveryRoute
  '/swap': typeof SwapRoute
  '/verification': typeof VerificationRoute
  '/games/chess': typeof GamesChessRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/ltoken'
    | '/privacy'
    | '/recovery'
    | '/swap'
    | '/verification'
    | '/games/chess'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/ltoken'
    | '/privacy'
    | '/recovery'
    | '/swap'
    | '/verification'
    | '/games/chess'
  id:
    | '__root__'
    | '/'
    | '/ltoken'
    | '/privacy'
    | '/recovery'
    | '/swap'
    | '/verification'
    | '/games/chess'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LtokenRoute: typeof LtokenRoute
  PrivacyRoute: typeof PrivacyRoute
  RecoveryRoute: typeof RecoveryRoute
  SwapRoute: typeof SwapRoute
  VerificationRoute: typeof VerificationRoute
  GamesChessRoute: typeof GamesChessRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LtokenRoute: LtokenRoute,
  PrivacyRoute: PrivacyRoute,
  RecoveryRoute: RecoveryRoute,
  SwapRoute: SwapRoute,
  VerificationRoute: VerificationRoute,
  GamesChessRoute: GamesChessRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/ltoken",
        "/privacy",
        "/recovery",
        "/swap",
        "/verification",
        "/games/chess"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/ltoken": {
      "filePath": "ltoken.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/recovery": {
      "filePath": "recovery.tsx"
    },
    "/swap": {
      "filePath": "swap.tsx"
    },
    "/verification": {
      "filePath": "verification.tsx"
    },
    "/games/chess": {
      "filePath": "games/chess.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
